name: Chess Game CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.5'
  NODE_VERSION: '20.x'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Go Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chess_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Set up test environment
      env:
        TEST_DB_URL: postgresql://postgres:postgres@localhost:5432/chess_test?sslmode=disable
      run: |
        echo "TEST_DB_URL=$TEST_DB_URL" >> $GITHUB_ENV

    - name: Run Go unit tests
      run: |
        go test -v -race -coverprofile=coverage.out ./internal/...
        go tool cover -html=coverage.out -o coverage.html

    - name: Run Go integration tests
      env:
        TEST_DB_URL: postgresql://postgres:postgres@localhost:5432/chess_test?sslmode=disable
      run: |
        go test -v -tags=integration ./tests/...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: backend
        name: backend-coverage

    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: |
          coverage.out
          coverage.html

  # Frontend React Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Run type checking
      working-directory: ./client
      run: npm run typecheck

    - name: Run frontend tests
      working-directory: ./client
      run: |
        npm test -- --coverage --reporter=verbose

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ./client/coverage
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Gosec Security Scanner (Go)
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

    - name: Run npm audit (Frontend)
      working-directory: ./client
      run: |
        npm audit --audit-level moderate

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Linting and Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install Go linters
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install golang.org/x/tools/cmd/goimports@latest

    - name: Run Go linters
      run: |
        goimports -d .
        staticcheck ./...
        go vet ./...

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run frontend linting
      working-directory: ./client
      run: |
        npm run build

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        docker build -t chess-backend:test .

    - name: Build frontend Docker image
      run: |
        docker build -t chess-frontend:test ./client

    - name: Test Docker containers
      run: |
        # Test backend container
        docker run --rm -d --name chess-backend-test \
          -p 8888:8888 \
          -e APP_ENV=test \
          chess-backend:test
        
        # Wait for container to start
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8888/check-h || exit 1
        
        # Cleanup
        docker stop chess-backend-test

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chess_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run performance benchmarks
      env:
        TEST_DB_URL: postgresql://postgres:postgres@localhost:5432/chess_test?sslmode=disable
      run: |
        go test -bench=. -benchmem -run=^Benchmark ./internal/... > benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

    - name: Load test WebSocket connections
      run: |
        # Install load testing tool
        go install github.com/tsenart/vegeta@latest
        
        # Run load test (simple HTTP endpoint test)
        echo 'GET http://localhost:8888/check-h' | vegeta attack -duration=30s -rate=100 | vegeta report

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, code-quality, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # e.g., deploy to cloud provider, update Kubernetes, etc.

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke tests to verify deployment
        # curl -f https://your-staging-url/check-h

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "Chess game deployment completed"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup old artifacts
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-tests, frontend-tests, security-scan, code-quality]
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
            const createdAt = new Date(artifact.created_at);
            const now = new Date();
            const diffTime = Math.abs(now - createdAt);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays > 30; // Delete artifacts older than 30 days
          });
          
          for (const artifact of oldArtifacts) {
            console.log(`Deleting artifact: ${artifact.name}`);
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id
            });
          }